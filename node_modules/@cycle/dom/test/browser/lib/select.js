"use strict";
var simulant = require("simulant");
var assert = require("assert");
var xstream_1 = require("xstream");
var run_1 = require("@cycle/run");
var lib_1 = require("../../../lib");
function createRenderTarget(id) {
    if (id === void 0) { id = null; }
    var element = document.createElement('div');
    element.className = 'cycletest';
    if (id) {
        element.id = id;
    }
    document.body.appendChild(element);
    return element;
}
describe('DOMSource.select()', function () {
    it('should have Observable `:root` in DOM source', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.div('.top-most', [
                    lib_1.p('Foo'),
                    lib_1.span('Bar'),
                ])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM.select(':root').elements().drop(1).take(1).addListener({
            next: function (root) {
                var classNameRegex = /top\-most/;
                assert.strictEqual(root.tagName, 'DIV');
                var child = root.children[0];
                var execResult = classNameRegex.exec(child.className);
                assert.notStrictEqual(execResult, null);
                assert.strictEqual(execResult[0], 'top-most');
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should return a DOMSource with elements(), events(), select()', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.h3('.myelementclass', 'Foobar')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose = run();
        // Make assertions
        var selection = sources.DOM.select('.myelementclass');
        assert.strictEqual(typeof selection, 'object');
        assert.strictEqual(typeof selection.select, 'function');
        assert.strictEqual(typeof selection.select('h3'), 'object');
        assert.strictEqual(typeof selection.elements, 'function');
        assert.strictEqual(typeof selection.elements(), 'object');
        assert.strictEqual(typeof selection.elements().subscribe, 'function');
        assert.strictEqual(typeof selection.events, 'function');
        assert.strictEqual(typeof selection.events('click'), 'object');
        assert.strictEqual(typeof selection.events('click').subscribe, 'function');
        dispose();
        done();
    });
    it('should have an observable of DOM elements', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.h3('.myelementclass', 'Foobar')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Make assertions
        sources.DOM.select('.myelementclass').elements().drop(1).take(1).addListener({
            next: function (elements) {
                assert.notStrictEqual(elements, null);
                assert.notStrictEqual(typeof elements, 'undefined');
                // Is an Array
                assert.strictEqual(Array.isArray(elements), true);
                assert.strictEqual(elements.length, 1);
                // Array with the H3 element
                assert.strictEqual(elements[0].tagName, 'H3');
                assert.strictEqual(elements[0].textContent, 'Foobar');
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should not select element outside the given scope', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.h3('.top-most', [
                    lib_1.h2('.bar', 'Wrong'),
                    lib_1.div('.foo', [
                        lib_1.h4('.bar', 'Correct'),
                    ]),
                ])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        // Make assertions
        sources.DOM.select('.foo').select('.bar').elements().drop(1).take(1).addListener({
            next: function (elements) {
                assert.strictEqual(elements.length, 1);
                var element = elements[0];
                assert.notStrictEqual(element, null);
                assert.notStrictEqual(typeof element, 'undefined');
                assert.strictEqual(element.tagName, 'H4');
                assert.strictEqual(element.textContent, 'Correct');
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
    });
    it('should select svg element', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.svg({ width: 150, height: 150 }, [
                    lib_1.svg.polygon({
                        attrs: {
                            class: 'triangle',
                            points: '20 0 20 150 150 20',
                        },
                    }),
                ])),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        // Make assertions
        var selection = sources.DOM.select('.triangle').elements().drop(1).take(1)
            .addListener({
            next: function (elements) {
                assert.strictEqual(elements.length, 1);
                var triangleElement = elements[0];
                assert.notStrictEqual(triangleElement, null);
                assert.notStrictEqual(typeof triangleElement, 'undefined');
                assert.strictEqual(triangleElement.tagName, 'polygon');
                done();
            },
        });
        run();
    });
    it('should support selecting the document element', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.div('hello world')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        function isDocument(element) {
            return 'body' in element && 'head' in element;
        }
        var dispose;
        sources.DOM.select('document').events('click').take(1).addListener({
            next: function (event) {
                assert(isDocument(event.target));
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
        simulant.fire(document, 'click');
    });
    it('should support selecting the body element', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.div('hello world')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var dispose;
        sources.DOM.select('body').events('click').take(1).addListener({
            next: function (event) {
                assert.equal(event.target.tagName, 'BODY');
                setTimeout(function () {
                    dispose();
                    done();
                });
            },
        });
        dispose = run();
        simulant.fire(document.body, 'click');
    });
    it('should have DevTools flag in BodyDOMSource elements() stream', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.div('hello world')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var element$ = sources.DOM.select('body').elements();
        assert.strictEqual(element$._isCycleSource, 'DOM');
        done();
    });
    it('should have DevTools flag in BodyDOMSource events() stream', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.div('hello world')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var event$ = sources.DOM.select('body').events('click');
        assert.strictEqual(event$._isCycleSource, 'DOM');
        done();
    });
    it('should have DevTools flag in DocumentDOMSource elements() stream', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.div('hello world')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var element$ = sources.DOM.select('document').elements();
        assert.strictEqual(element$._isCycleSource, 'DOM');
        done();
    });
    it('should have DevTools flag in DocumentDOMSource events() stream', function (done) {
        function app(sources) {
            return {
                DOM: xstream_1.default.of(lib_1.div('hello world')),
            };
        }
        var _a = run_1.setup(app, {
            DOM: lib_1.makeDOMDriver(createRenderTarget()),
        }), sinks = _a.sinks, sources = _a.sources, run = _a.run;
        var event$ = sources.DOM.select('document').events('click');
        assert.strictEqual(event$._isCycleSource, 'DOM');
        done();
    });
});
